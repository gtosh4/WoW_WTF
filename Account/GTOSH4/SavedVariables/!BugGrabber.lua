
BugGrabberDB = {
	["lastSanitation"] = 3,
	["session"] = 533,
	["errors"] = {
		{
			["message"] = "[string \"--[==[ Error in 'Prideful' ]==] return func...\"]:79: attempt to call field 'unpack' (a nil value)",
			["time"] = "2021/01/04 02:45:38",
			["stack"] = "[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:541: in function <Interface\\AddOns\\WeakAuras\\GenericTrigger.lua:534>\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:730: in function `ScanEventsInternal'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:689: in function `ScanEvents'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:835: in function <Interface\\AddOns\\WeakAuras\\GenericTrigger.lua:822>",
			["session"] = 527,
			["counter"] = 90,
		}, -- [1]
		{
			["message"] = "[string \"--[==[ Error in 'Prideful':'initialization'...\"]:51: attempt to index field '?' (a nil value)",
			["time"] = "2021/01/04 02:45:36",
			["stack"] = "[string \"--[==[ Error in 'Prideful' ]==] return function(allstates, event, ...) -- COMBAT_LOG_EVENT_UNFILTERED,TOSH_PRIDEFUL_UPDATE\n    local state = allstates[\"prideful\"] or {\n        show         = false,\n        changed      = false,\n        progressType = \"timed\",\n        spellId      = aura_env.buffSpellId,\n        samples      = {},\n        stacks       = 0,\n    }\n    allstates[\"prideful\"] = state\n\n    if event == \"TOSH_PRIDEFUL_UPDATE\" then\n        if not state.show then return end\n        if not state.unit or UnitIsDead(state.unit) then\n            aura_env:reset(state)\n        else\n            aura_env:ttd_update(state)\n        end\n\n    elseif event == \"COMBAT_LOG_EVENT_UNFILTERED\" then\n        local args = {...}\n        \n        if (\n            args[2] == \"SPELL_DAMAGE\" and\n            args[8] == UnitGUID(\"player\") and\n            args[12] == aura_env.damageSpellId\n        ) then\n            state.show = true\n            state.changed = true\n            if not state.firstTick then\n                state.guid, state.unit = aura_env.find_np()\n                state.firstTick = GetTime()\n                wipe(state.samples)\n                print( (\"prideful start on %s (%s)\"):format(state.guid, state.unit) )\n            end\n            aura_env:ttd_update(state)\n            aura_env:make_ticks(state)\n\n            if aura_env.ticker then\n                aura_env.ticker:Cancel()\n            end\n            aura_env.ticker = C_Timer.NewTicker(\n                1 / (aura_env.config.refreshRate or 100),\n                function() WeakAuras.ScanEvents(\"TOSH_PRIDEFUL_UPDATE\") end\n            )\n\n            ViragDevTool_AddData(\n                {\n                    unit       = state.unit,\n                    guid       = state.guid,\n                    stacks     = state.stacks,\n                    args       = args,\n                    firstTick  = state.firstTick,\n                    tickOffset = GetTime() - state.firstTick,\n                    samples    = {table.unpack(state.samples)},\n                    env        = aura_env,\n                    config     = aura_env.config,\n                },\n                \"tick \"..state.stacks\n            )\n\n        elseif (\n            (args[2] == \"SPELL_AURA_APPLIED\" or args[2] == \"SPELL_AURA_APPLIED_DOSE\") and\n            (state.guid and args[8] == state.guid) and\n            args[12] == aura_env.buffSpellId\n        ) then\n            local buff = {WA_GetUnitDebuff(state.unit, aura_env.prideBuff)}\n            state.stacks = buff[3]\n\n            ViragDevTool_AddData(\n                {\n                    unit       = state.unit,\n                    guid       = state.guid,\n                    stacks     = state.stacks,\n                    args       = args,\n                    buff       = buff,\n                    firstTick  = state.firstTick,\n                    tickOffset = GetTime() - state.firstTick,\n                    samples    = {table.unpack(state.samples)},\n                    env        = aura_env,\n                    config     = aura_env.config,\n                },\n                \"stack \"..state.stacks\n            )\n\n        elseif state.show and args[8] == state.guid and UnitIsDead(state.unit) then\n            aura_env:reset(state)\n        end\n    end\n    return true\nend\n\"]:36: in function <[string \"--[==[ Error in 'Prideful' ]==] return func...\"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:541: in function <Interface\\AddOns\\WeakAuras\\GenericTrigger.lua:534>\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:730: in function `ScanEventsInternal'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:689: in function `ScanEvents'\n[string \"@Interface\\AddOns\\WeakAuras\\GenericTrigger.lua\"]:835: in function <Interface\\AddOns\\WeakAuras\\GenericTrigger.lua:822>",
			["session"] = 527,
			["counter"] = 96,
		}, -- [2]
	},
}
